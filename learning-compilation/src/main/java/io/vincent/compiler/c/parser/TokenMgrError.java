/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 6.0 */
/* JavaCCOptions: */
package io.vincent.compiler.c.parser;

/**
 * Token Manager Error.
 */
public class TokenMgrError extends Error {

	/**
	 * The version identifier for this Serializable class.
	 * Increment only if the <i>serialized</i> form of the
	 * class changes.
	 */
	private static final long serialVersionUID = 1L;

	/*
	 * Ordinals for various reasons why an Error of this type can be thrown.
	 */

	/**
	 * Lexical error occurred.
	 */
	static final int LEXICAL_ERROR = 0;

	/**
	 * An attempt was made to create a second instance of a static token manager.
	 */
	static final int STATIC_LEXER_ERROR = 1;

	/**
	 * Tried to change to an invalid lexical state.
	 */
	static final int INVALID_LEXICAL_STATE = 2;

	/**
	 * Detected (and bailed out of) an infinite loop in the token manager.
	 */
	static final int LOOP_DETECTED = 3;

	/**
	 * Indicates the reason why the exception is thrown. It will have
	 * one of the above 4 values.
	 */
	int errorCode;

	/**
	 * Replaces unprintable characters by their escaped (or unicode escaped)
	 * equivalents in the given string
	 */
	protected static final String addEscapes(String str) {
		return escapes(str);
	}

	static String escapes(String str) {
		StringBuilder resultValue = new StringBuilder();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
				case 0:
					continue;
				case '\b':
					resultValue.append("\\b");
					continue;
				case '\t':
					resultValue.append("\\t");
					continue;
				case '\n':
					resultValue.append("\\n");
					continue;
				case '\f':
					resultValue.append("\\f");
					continue;
				case '\r':
					resultValue.append("\\r");
					continue;
				case '\"':
					resultValue.append("\\\"");
					continue;
				case '\'':
					resultValue.append("\\\'");
					continue;
				case '\\':
					resultValue.append("\\\\");
					continue;
				default:
					if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
						String s = "0000" + Integer.toString(ch, 16);
						resultValue.append("\\u").append(s.substring(s.length() - 4));
					} else {
						resultValue.append(ch);
					}
			}
		}
		return resultValue.toString();
	}

	/**
	 * Returns a detailed message for the Error when it is thrown by the
	 * token manager to indicate a lexical error.
	 * Parameters :
	 * EOFSeen     : indicates if EOF caused the lexical error
	 * curLexState : lexical state in which this error occurred
	 * errorLine   : line number when the error occurred
	 * errorColumn : column number when the error occurred
	 * errorAfter  : prefix that was seen before this error occurred
	 * curchar     : the offending character
	 * Note: You can customize the lexical error message by modifying this method.
	 */
	protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
		return ("Lexical error at line " +
				        errorLine + ", column " +
				        errorColumn + ".  Encountered: " +
				        (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int) curChar + "), ") +
				        "after : \"" + addEscapes(errorAfter) + "\"");
	}

	/**
	 * You can also modify the body of this method to customize your error messages.
	 * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
	 * of end-users concern, so you can return something like :
	 * <p>
	 * "Internal Error : Please file a bug report .... "
	 * <p>
	 * from this method for such cases in the release version of your parser.
	 */
	public String getMessage() {
		return super.getMessage();
	}

	/*
	 * Constructors of various flavors follow.
	 */

	/**
	 * No arg constructor.
	 */
	public TokenMgrError() {
	}

	/**
	 * Constructor with message and reason.
	 */
	public TokenMgrError(String message, int reason) {
		super(message);
		errorCode = reason;
	}

	/**
	 * Full Constructor.
	 */
	public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
		this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
	}
}
/* JavaCC - OriginalChecksum=da6e5cdb2d913c68c7fe6298836e1ffc (do not edit this line) */
