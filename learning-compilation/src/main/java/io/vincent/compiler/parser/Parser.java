/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package io.vincent.compiler.parser;

import io.vincent.compiler.ast.*;
import io.vincent.compiler.entity.*;
import io.vincent.compiler.exception.CompileException;
import io.vincent.compiler.exception.FileException;
import io.vincent.compiler.exception.SyntaxException;
import io.vincent.compiler.type.TypeRef;
import io.vincent.compiler.type.ref.*;
import io.vincent.compiler.utils.ErrorHandler;

import java.io.*;
import java.util.*;

public class Parser implements ParserConstants {
	static public AST parseFile(File file, LibraryLoader loader, ErrorHandler errorHandler)
			throws SyntaxException, FileException {
		return parseFile(file, loader, errorHandler, false);
	}

	// #@@range/parseFile{
	static public AST parseFile(File file, LibraryLoader loader, ErrorHandler errorHandler, boolean debug)
			throws SyntaxException, FileException {
		return newFileParser(file, loader, errorHandler, debug).parse();
	}
	// #@@}

	static public Declarations parseDeclFile(File file, LibraryLoader loader, ErrorHandler errorHandler)
			throws SyntaxException, FileException {
		return parseDeclFile(file, loader, errorHandler, false);
	}

	static public Declarations parseDeclFile(File file, LibraryLoader loader, ErrorHandler errorHandler, boolean debug)
			throws SyntaxException, FileException {
		return newFileParser(file, loader, errorHandler, debug).parseDecls();
	}

	// #@@range/newFileParser{
	static final public String SOURCE_ENCODING = "UTF-8";

	static public Parser newFileParser(File file, LibraryLoader loader, ErrorHandler errorHandler, boolean debug)
			throws FileException {
		try {
			BufferedReader r = new BufferedReader(new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING));
			return new Parser(r, file.getPath(), loader, errorHandler, debug);
		} catch (FileNotFoundException ex) {
			throw new FileException(ex.getMessage());
		} catch (UnsupportedEncodingException ex) {
			throw new Error("UTF-8 is not supported??: " + ex.getMessage());
		}
	}
	// #@@}

	// #@@range/instance_members{
	private String sourceName;
	private LibraryLoader loader;
	private ErrorHandler errorHandler;
	private Set<String> knownTypedefs;
	// #@@}

	// #@@range/ctor1{
	public Parser(Reader s, String name, LibraryLoader loader, ErrorHandler errorHandler) {
		this(s, name, loader, errorHandler, false);
	}
	// #@@}

	// #@@range/ctor2{
	public Parser(Reader s, String name, LibraryLoader loader, ErrorHandler errorHandler, boolean debug) {
		this(s);
		this.sourceName = name;
		this.loader = loader;
		this.errorHandler = errorHandler;
		this.knownTypedefs = new HashSet<String>();
		if (debug) {
			enable_tracing();
		} else {
			disable_tracing();
		}
	}
	// #@@}

	// #@@range/parse{
	public AST parse() throws SyntaxException {
		try {
			return compilation_unit();
		} catch (TokenMgrError err) {
			throw new SyntaxException(err.getMessage());
		} catch (ParseException ex) {
			throw new SyntaxException(ex.getMessage());
		} catch (LookaheadSuccess err) {
			throw new SyntaxException("syntax error");
		}
	}
	// #@@}

	public Declarations parseDecls() throws SyntaxException {
		try {
			return declaration_file();
		} catch (TokenMgrError ex) {
			throw new SyntaxException(ex.getMessage());
		} catch (ParseException ex) {
			throw new SyntaxException(ex.getMessage());
		}
	}

	private void addKnownTypedefs(List<TypedefNode> typedefs) {
		for (TypedefNode n : typedefs) {
			addType(n.name());
		}
	}

	private void addType(String name) {
		knownTypedefs.add(name);
	}

	private boolean isType(String name) {
		return knownTypedefs.contains(name);
	}

	// #@@range/newReader{
	private IntegerLiteralNode integerNode(Location loc, String image) {
		long i = integerValue(image);
		if (image.endsWith("UL")) {
			return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(), i);
		} else if (image.endsWith("L")) {
			return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(), i);
		} else if (image.endsWith("U")) {
			return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(), i);
		} else {
			return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
		}
	}
	// #@@}

	// #@@range/integerValue{
	private long integerValue(String image) {
		String s = image.replaceFirst("[UL]+", "");
		if (s.startsWith("0x") || s.startsWith("0X")) {
			return Long.parseLong(s.substring(2), 16);
		} else if (s.startsWith("0") && !s.equals("0")) {
			return Long.parseLong(s.substring(1), 8);
		} else {
			return Long.parseLong(s, 10);
		}
	}
	// #@@}

	// #@@range/characterCode{
	private long characterCode(String image) throws ParseException {
		String s = stringValue(image);
		if (s.length() != 1) {
			throw new Error("must not happen: character length > 1");
		}
		return (long) s.charAt(0);
	}
	// #@@}

	// #@@range/stringValue{
	private String stringValue(String _image) throws ParseException {
		int pos = 0;
		int idx;
		StringBuffer buf = new StringBuffer();
		String image = _image.substring(1, _image.length() - 1);

		while ((idx = image.indexOf("\u005c\u005c", pos)) >= 0) {
			buf.append(image.substring(pos, idx));
			if (image.length() >= idx + 4
					    && Character.isDigit(image.charAt(idx + 1))
					    && Character.isDigit(image.charAt(idx + 2))
					    && Character.isDigit(image.charAt(idx + 3))) {
				buf.append(unescapeOctal(image.substring(idx + 1, idx + 4)));
				pos = idx + 4;
			} else {
				buf.append(unescapeSeq(image.charAt(idx + 1)));
				pos = idx + 2;
			}
		}
		if (pos < image.length()) {
			buf.append(image.substring(pos, image.length()));
		}
		return buf.toString();
	}
	// #@@}

	private TypeRef size_t() {
		return IntegerTypeRef.ulongRef();
	}

	// #@@range/unescapeOctal{
	private static final int charMax = 255;

	private char unescapeOctal(String digits) throws ParseException {
		int i = Integer.parseInt(digits, 8);
		if (i > charMax) {
			throw new ParseException(
					"octal character sequence too big: \u005c\u005c" + digits);
		}
		return (char) i;
	}
	// #@@}

	// #@@range/unescapeSeq{
	private static final char bell = 7;
	private static final char backspace = 8;
	private static final char escape = 27;
	private static final char vt = 11;

	private char unescapeSeq(char c) throws ParseException {
		switch (c) {
			case '0':
				return '\0';
			case '"':
				return '"';
			case '\'':
				return '\'';
			case 'a':
				return bell;
			case 'b':
				return backspace;
			case 'e':
				return escape;
			case 'f':
				return '\f';
			case 'n':
				return '\n';
			case 'r':
				return '\r';
			case 't':
				return '\t';
			case 'v':
				return vt;
			default:
				throw new ParseException("unknown escape sequence: \"\\" + c);
		}
	}
	// #@@}

	// #@@range/location{
	protected Location location(Token t) {
		return new Location(sourceName, t);
	}

// rule5
// #@@}

	/*
	 *  Grammar
	 */

	// #@@range/compilation_unit{
	final public AST compilation_unit() throws ParseException {
		trace_call("compilation_unit");
		try {
			Token t;
			Declarations impdecls, decls;
			t = getToken(1);
			impdecls = import_stmts();
			decls = top_defs();
			jj_consume_token(0);
			decls.add(impdecls);
			{
				if ("" != null) return new AST(location(t), decls);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("compilation_unit");
		}
	}

// #@@}

	// #@@range/declaration_file{
	final public Declarations declaration_file() throws ParseException {
		trace_call("declaration_file");
		try {
			Declarations impdecls, decls = new Declarations();
			UndefinedFunction funcdecl;
			UndefinedVariable vardecl;
			Constant defconst;
			StructNode defstruct;
			UnionNode defunion;
			TypedefNode typedef;
			impdecls = import_stmts();
			decls.add(impdecls);
			label_1:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case STRUCT:
					case UNION:
					case EXTERN:
					case CONST:
					case TYPEDEF: {
						;
						break;
					}
					default:
						jj_la1[0] = jj_gen;
						break label_1;
				}
				if (jj_2_1(2147483647)) {
					funcdecl = funcdecl();
					decls.addFuncdecl(funcdecl);
				} else {
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
						case EXTERN: {
							vardecl = vardecl();
							decls.addVardecl(vardecl);
							break;
						}
						case CONST: {
							defconst = defconst();
							decls.addConstant(defconst);
							break;
						}
						case STRUCT: {
							defstruct = defstruct();
							decls.addDefstruct(defstruct);
							break;
						}
						case UNION: {
							defunion = defunion();
							decls.addDefunion(defunion);
							break;
						}
						case TYPEDEF: {
							typedef = typedef();
							decls.addTypedef(typedef);
							break;
						}
						default:
							jj_la1[1] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
				}
			}
			jj_consume_token(0);
			{
				if ("" != null) return decls;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("declaration_file");
		}
	}

// #@@}

	// #@@range/import_stmts{
	final public Declarations import_stmts() throws ParseException {
		trace_call("import_stmts");
		try {
			String libid;
			Declarations impdecls = new Declarations();
			label_2:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case IMPORT: {
						;
						break;
					}
					default:
						jj_la1[2] = jj_gen;
						break label_2;
				}
				libid = import_stmt();
				try {
					Declarations decls = loader.loadLibrary(libid, errorHandler);
					if (decls != null) {
						impdecls.add(decls);
						addKnownTypedefs(decls.typedefs());
					}
				} catch (CompileException ex) {
					{
						if (true) throw new ParseException(ex.getMessage());
					}
				}
			}
			{
				if ("" != null) return impdecls;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("import_stmts");
		}
	}

// #@@}

	// #@@range/import_stmt{
	final public String import_stmt() throws ParseException {
		trace_call("import_stmt");
		try {
			StringBuffer buf = new StringBuffer();
			String n;
			jj_consume_token(IMPORT);
			n = name();
			buf.append(n);
			label_3:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 47: {
						;
						break;
					}
					default:
						jj_la1[3] = jj_gen;
						break label_3;
				}
				jj_consume_token(47);
				n = name();
				buf.append(".");
				buf.append(n);
			}
			jj_consume_token(48);
			{
				if ("" != null) return buf.toString();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("import_stmt");
		}
	}

// #@@}

	// #@@range/top_defs{
	final public Declarations top_defs() throws ParseException {
		trace_call("top_defs");
		try {
			Declarations decls = new Declarations();
			DefinedFunction defun;
			List<DefinedVariable> defvars;
			Constant defconst;
			StructNode defstruct;
			UnionNode defunion;
			TypedefNode typedef;
			label_4:
			while (true) {
				if (jj_2_2(1)) {
					;
				} else {
					break label_4;
				}
				if (jj_2_3(2147483647)) {
					defun = defun();
					decls.addDefun(defun);
				} else if (jj_2_4(3)) {
					defvars = defvars();
					decls.addDefvars(defvars);
				} else {
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
						case CONST: {
							defconst = defconst();
							decls.addConstant(defconst);
							break;
						}
						case STRUCT: {
							defstruct = defstruct();
							decls.addDefstruct(defstruct);
							break;
						}
						case UNION: {
							defunion = defunion();
							decls.addDefunion(defunion);
							break;
						}
						case TYPEDEF: {
							typedef = typedef();
							decls.addTypedef(typedef);
							break;
						}
						default:
							jj_la1[4] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
				}
			}
			{
				if ("" != null) return decls;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("top_defs");
		}
	}

// #@@}

	// #@@range/defvars{
	final public List<DefinedVariable> defvars() throws ParseException {
		trace_call("defvars");
		try {
			List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
			boolean priv;
			TypeNode type;
			String name;
			ExpressionNode init = null;
			priv = storage();
			type = type();
			name = name();
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case 49: {
					jj_consume_token(49);
					init = expr();
					break;
				}
				default:
					jj_la1[5] = jj_gen;
					;
			}
			defs.add(new DefinedVariable(priv, type, name, init));
			init = null;
			label_5:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 50: {
						;
						break;
					}
					default:
						jj_la1[6] = jj_gen;
						break label_5;
				}
				jj_consume_token(50);
				name = name();
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 49: {
						jj_consume_token(49);
						init = expr();
						break;
					}
					default:
						jj_la1[7] = jj_gen;
						;
				}
				defs.add(new DefinedVariable(priv, type, name, init));
				init = null;
			}
			jj_consume_token(48);
			{
				if ("" != null) return defs;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("defvars");
		}
	}

// #@@}

	// #@@range/defconst{
	final public Constant defconst() throws ParseException {
		trace_call("defconst");
		try {
			TypeNode type;
			String name;
			ExpressionNode value;
			jj_consume_token(CONST);
			type = type();
			name = name();
			jj_consume_token(49);
			value = expr();
			jj_consume_token(48);
			{
				if ("" != null) return new Constant(type, name, value);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("defconst");
		}
	}

// #@@}

	// #@@range/defun{
	final public DefinedFunction defun() throws ParseException {
		trace_call("defun");
		try {
			boolean priv;
			TypeRef ret;
			String n;
			Params ps;
			BlockNode body;
			priv = storage();
			ret = typeref();
			n = name();
			jj_consume_token(46);
			ps = params();
			jj_consume_token(51);
			body = block();
			TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
			{
				if ("" != null) return new DefinedFunction(priv, new TypeNode(t), n, ps, body);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("defun");
		}
	}

// #@@}

	// #@@range/storage{
	final public boolean storage() throws ParseException {
		trace_call("storage");
		try {
			Token t = null;
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case STATIC: {
					t = jj_consume_token(STATIC);
					break;
				}
				default:
					jj_la1[8] = jj_gen;
					;
			}
			{
				if ("" != null) return (t == null ? false : true);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("storage");
		}
	}

// #@@}

	// #@@range/storage{
	final public Params params() throws ParseException {
		trace_call("params");
		try {
			Token t;
			Params params;
			if (jj_2_5(2147483647)) {
				t = jj_consume_token(VOID);
				{
					if ("" != null) return new Params(location(t), new ArrayList<CBCParameter>());
				}
			} else if (jj_2_6(1)) {
				params = fixedparams();
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 50: {
						jj_consume_token(50);
						jj_consume_token(52);
						params.acceptVarargs();
						break;
					}
					default:
						jj_la1[9] = jj_gen;
						;
				}
				{
					if ("" != null) return params;
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("params");
		}
	}

// #@@}

	// #@@range/fixedparams{
	final public Params fixedparams() throws ParseException {
		trace_call("fixedparams");
		try {
			List<CBCParameter> params = new ArrayList<CBCParameter>();
			CBCParameter param, param1;
			param1 = param();
			params.add(param1);
			label_6:
			while (true) {
				if (jj_2_7(2)) {
					;
				} else {
					break label_6;
				}
				jj_consume_token(50);
				param = param();
				params.add(param);
			}
			{
				if ("" != null) return new Params(param1.location(), params);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("fixedparams");
		}
	}

// #@@}

	// #@@range/param{
	final public CBCParameter param() throws ParseException {
		trace_call("param");
		try {
			TypeNode t;
			String n;
			t = type();
			n = name();
			{
				if ("" != null) return new CBCParameter(t, n);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("param");
		}
	}

// #@@}

	// #@@range/block{
	final public BlockNode block() throws ParseException {
		trace_call("block");
		try {
			Token t;
			List<DefinedVariable> vars;
			List<StatementNode> stmts;
			t = jj_consume_token(53);
			vars = defvar_list();
			stmts = stmts();
			jj_consume_token(54);
			{
				if ("" != null) return new BlockNode(location(t), vars, stmts);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("block");
		}
	}

// #@@}


	// #@@range/defvar_list{
	final public List<DefinedVariable> defvar_list() throws ParseException {
		trace_call("defvar_list");
		try {
			List<DefinedVariable> result = new ArrayList<DefinedVariable>();
			List<DefinedVariable> vars;
			label_7:
			while (true) {
				if (jj_2_8(1)) {
					;
				} else {
					break label_7;
				}
				vars = defvars();
				result.addAll(vars);
			}
			{
				if ("" != null) return result;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("defvar_list");
		}
	}

// #@@}

	// #@@range/defstruct{
	final public StructNode defstruct() throws ParseException {
		trace_call("defstruct");
		try {
			Token t;
			String n;
			List<Slot> membs;
			t = jj_consume_token(STRUCT);
			n = name();
			membs = member_list();
			jj_consume_token(48);
			{
				if ("" != null) return new StructNode(location(t), new StructTypeRef(n), n, membs);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("defstruct");
		}
	}

	// #@@}
	final public UnionNode defunion() throws ParseException {
		trace_call("defunion");
		try {
			Token t;
			String n;
			List<Slot> membs;
			t = jj_consume_token(UNION);
			n = name();
			membs = member_list();
			jj_consume_token(48);
			{
				if ("" != null) return new UnionNode(location(t), new UnionTypeRef(n), n, membs);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("defunion");
		}
	}

	// #@@range/member_list{
	final public List<Slot> member_list() throws ParseException {
		trace_call("member_list");
		try {
			List<Slot> membs = new ArrayList<Slot>();
			Slot s;
			jj_consume_token(53);
			label_8:
			while (true) {
				if (jj_2_9(1)) {
					;
				} else {
					break label_8;
				}
				s = slot();
				jj_consume_token(48);
				membs.add(s);
			}
			jj_consume_token(54);
			{
				if ("" != null) return membs;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("member_list");
		}
	}

// #@@}

	// #@@range/slot{
	final public Slot slot() throws ParseException {
		trace_call("slot");
		try {
			TypeNode t;
			String n;
			t = type();
			n = name();
			{
				if ("" != null) return new Slot(t, n);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("slot");
		}
	}

// #@@}

	// #@@range/funcdecl{
	final public UndefinedFunction funcdecl() throws ParseException {
		trace_call("funcdecl");
		try {
			TypeRef ret;
			String n;
			Params ps;
			jj_consume_token(EXTERN);
			ret = typeref();
			n = name();
			jj_consume_token(46);
			ps = params();
			jj_consume_token(51);
			jj_consume_token(48);
			TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
			{
				if ("" != null) return new UndefinedFunction(new TypeNode(t), n, ps);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("funcdecl");
		}
	}

	// #@@}
	final public UndefinedVariable vardecl() throws ParseException {
		trace_call("vardecl");
		try {
			TypeNode t;
			String n;
			jj_consume_token(EXTERN);
			t = type();
			n = name();
			jj_consume_token(48);
			{
				if ("" != null) return new UndefinedVariable(t, n);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("vardecl");
		}
	}

	// #@@range/type{
	final public TypeNode type() throws ParseException {
		trace_call("type");
		try {
			TypeRef ref;
			ref = typeref();
			{
				if ("" != null) return new TypeNode(ref);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("type");
		}
	}

// #@@}

	// #@@range/typeref{
	final public TypeRef typeref() throws ParseException {
		trace_call("typeref");
		try {
			TypeRef ref;
			Token t;
			ParamTypeRefs params;
			ref = typeref_base();
			label_9:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 46:
					case 55:
					case 57: {
						;
						break;
					}
					default:
						jj_la1[10] = jj_gen;
						break label_9;
				}
				if (jj_2_10(2)) {
					jj_consume_token(55);
					jj_consume_token(56);
					ref = new ArrayTypeRef(ref);
				} else {
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
						case 55: {
							jj_consume_token(55);
							t = jj_consume_token(INTEGER);
							jj_consume_token(56);
							ref = new ArrayTypeRef(ref, integerValue(t.image));
							break;
						}
						case 57: {
							jj_consume_token(57);
							ref = new PointerTypeRef(ref);
							break;
						}
						case 46: {
							jj_consume_token(46);
							params = param_typerefs();
							jj_consume_token(51);
							ref = new FunctionTypeRef(ref, params);
							break;
						}
						default:
							jj_la1[11] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
				}
			}
			{
				if ("" != null) return ref;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("typeref");
		}
	}

// #@@}

	// #@@range/param_typerefs{
	final public ParamTypeRefs param_typerefs() throws ParseException {
		trace_call("param_typerefs");
		try {
			ParamTypeRefs params;
			if (jj_2_11(2147483647)) {
				jj_consume_token(VOID);
				{
					if ("" != null) return new ParamTypeRefs(new ArrayList<TypeRef>());
				}
			} else if (jj_2_12(1)) {
				params = fixedparam_typerefs();
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 50: {
						jj_consume_token(50);
						jj_consume_token(52);
						params.acceptVarargs();
						break;
					}
					default:
						jj_la1[12] = jj_gen;
						;
				}
				{
					if ("" != null) return params;
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("param_typerefs");
		}
	}

// #@@}

	// #@@range/fixedparam_typerefs{
	final public ParamTypeRefs fixedparam_typerefs() throws ParseException {
		trace_call("fixedparam_typerefs");
		try {
			List<TypeRef> refs = new ArrayList<TypeRef>();
			TypeRef ref;
			ref = typeref();
			refs.add(ref);
			label_10:
			while (true) {
				if (jj_2_13(2)) {
					;
				} else {
					break label_10;
				}
				jj_consume_token(50);
				ref = typeref();
				refs.add(ref);
			}
			{
				if ("" != null) return new ParamTypeRefs(refs);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("fixedparam_typerefs");
		}
	}

// #@@}

	// #@@range/typeref_base{
	final public TypeRef typeref_base() throws ParseException {
		trace_call("typeref_base");
		try {
			Token t, name;
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case VOID: {
					t = jj_consume_token(VOID);
					{
						if ("" != null) return new VoidTypeRef(location(t));
					}
					break;
				}
				case CHAR: {
					t = jj_consume_token(CHAR);
					{
						if ("" != null) return IntegerTypeRef.charRef(location(t));
					}
					break;
				}
				case SHORT: {
					t = jj_consume_token(SHORT);
					{
						if ("" != null) return IntegerTypeRef.shortRef(location(t));
					}
					break;
				}
				case INT: {
					t = jj_consume_token(INT);
					{
						if ("" != null) return IntegerTypeRef.intRef(location(t));
					}
					break;
				}
				case LONG: {
					t = jj_consume_token(LONG);
					{
						if ("" != null) return IntegerTypeRef.longRef(location(t));
					}
					break;
				}
				default:
					jj_la1[13] = jj_gen;
					if (jj_2_14(2)) {
						t = jj_consume_token(UNSIGNED);
						jj_consume_token(CHAR);
						{
							if ("" != null) return IntegerTypeRef.ucharRef(location(t));
						}
					} else if (jj_2_15(2)) {
						t = jj_consume_token(UNSIGNED);
						jj_consume_token(SHORT);
						{
							if ("" != null) return IntegerTypeRef.ushortRef(location(t));
						}
					} else if (jj_2_16(2)) {
						t = jj_consume_token(UNSIGNED);
						jj_consume_token(INT);
						{
							if ("" != null) return IntegerTypeRef.uintRef(location(t));
						}
					} else {
						switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
							case UNSIGNED: {
								t = jj_consume_token(UNSIGNED);
								jj_consume_token(LONG);
								{
									if ("" != null) return IntegerTypeRef.ulongRef(location(t));
								}
								break;
							}
							case STRUCT: {
								t = jj_consume_token(STRUCT);
								name = jj_consume_token(IDENTIFIER);
								{
									if ("" != null) return new StructTypeRef(location(t), name.image);
								}
								break;
							}
							case UNION: {
								t = jj_consume_token(UNION);
								name = jj_consume_token(IDENTIFIER);
								{
									if ("" != null) return new UnionTypeRef(location(t), name.image);
								}
								break;
							}
							default:
								jj_la1[14] = jj_gen;
								if (isType(getToken(1).image)) {
									name = jj_consume_token(IDENTIFIER);
									{
										if ("" != null) return new UserTypeRef(location(name), name.image);
									}
								} else {
									jj_consume_token(-1);
									throw new ParseException();
								}
						}
					}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("typeref_base");
		}
	}

// #@@}

	// #@@range/typedef{
	final public TypedefNode typedef() throws ParseException {
		trace_call("typedef");
		try {
			Token t;
			TypeRef ref;
			Token newname;
			t = jj_consume_token(TYPEDEF);
			ref = typeref();
			newname = jj_consume_token(IDENTIFIER);
			jj_consume_token(48);
			addType(newname.image);
			{
				if ("" != null) return new TypedefNode(location(t), ref, newname.image);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("typedef");
		}
	}

// #@@}

	// #@@range/stmts{
	final public List<StatementNode> stmts() throws ParseException {
		trace_call("stmts");
		try {
			List<StatementNode> ss = new ArrayList<StatementNode>();
			StatementNode s;
			label_11:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case IF:
					case SWITCH:
					case WHILE:
					case DO:
					case FOR:
					case RETURN:
					case BREAK:
					case CONTINUE:
					case GOTO:
					case SIZEOF:
					case IDENTIFIER:
					case INTEGER:
					case CHARACTER:
					case STRING:
					case 46:
					case 48:
					case 53:
					case 57:
					case 80:
					case 83:
					case 84:
					case 87:
					case 88:
					case 89:
					case 90: {
						;
						break;
					}
					default:
						jj_la1[15] = jj_gen;
						break label_11;
				}
				s = stmt();
				if (s != null) ss.add(s);
			}
			{
				if ("" != null) return ss;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("stmts");
		}
	}

// #@@}

	// #@@range/stmt{
	final public StatementNode stmt() throws ParseException {
		trace_call("stmt");
		try {
			StatementNode n = null;
			ExpressionNode e = null;
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case 48: {
					jj_consume_token(48);
					break;
				}
				default:
					jj_la1[16] = jj_gen;
					if (jj_2_17(2)) {
						n = labeled_stmt();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
							case SIZEOF:
							case IDENTIFIER:
							case INTEGER:
							case CHARACTER:
							case STRING:
							case 46:
							case 57:
							case 80:
							case 83:
							case 84:
							case 87:
							case 88:
							case 89:
							case 90: {
								e = expr();
								jj_consume_token(48);
								n = new ExpressionStatementNode(e.location(), e);
								break;
							}
							case 53: {
								n = block();
								break;
							}
							case IF: {
								n = if_stmt();
								break;
							}
							case WHILE: {
								n = while_stmt();
								break;
							}
							case DO: {
								n = dowhile_stmt();
								break;
							}
							case FOR: {
								n = for_stmt();
								break;
							}
							case SWITCH: {
								n = switch_stmt();
								break;
							}
							case BREAK: {
								n = break_stmt();
								break;
							}
							case CONTINUE: {
								n = continue_stmt();
								break;
							}
							case GOTO: {
								n = goto_stmt();
								break;
							}
							case RETURN: {
								n = return_stmt();
								break;
							}
							default:
								jj_la1[17] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
			}
			{
				if ("" != null) return n;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("stmt");
		}
	}

	// #@@}
	final public LabelNode labeled_stmt() throws ParseException {
		trace_call("labeled_stmt");
		try {
			Token t;
			StatementNode n;
			t = jj_consume_token(IDENTIFIER);
			jj_consume_token(58);
			n = stmt();
			{
				if ("" != null) return new LabelNode(location(t), t.image, n);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("labeled_stmt");
		}
	}

	// #@@range/if_stmt{
	final public IfNode if_stmt() throws ParseException {
		trace_call("if_stmt");
		try {
			Token t;
			ExpressionNode cond;
			StatementNode thenBody, elseBody = null;
			t = jj_consume_token(IF);
			jj_consume_token(46);
			cond = expr();
			jj_consume_token(51);
			thenBody = stmt();
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case ELSE: {
					jj_consume_token(ELSE);
					elseBody = stmt();
					break;
				}
				default:
					jj_la1[18] = jj_gen;
					;
			}
			{
				if ("" != null) return new IfNode(location(t), cond, thenBody, elseBody);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("if_stmt");
		}
	}

// #@@}

	// #@@range/while_stmt{
	final public WhileNode while_stmt() throws ParseException {
		trace_call("while_stmt");
		try {
			Token t;
			ExpressionNode cond;
			StatementNode body;
			t = jj_consume_token(WHILE);
			jj_consume_token(46);
			cond = expr();
			jj_consume_token(51);
			body = stmt();
			{
				if ("" != null) return new WhileNode(location(t), cond, body);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("while_stmt");
		}
	}

	// #@@}
	final public DoWhileNode dowhile_stmt() throws ParseException {
		trace_call("dowhile_stmt");
		try {
			Token t;
			ExpressionNode cond;
			StatementNode body;
			t = jj_consume_token(DO);
			body = stmt();
			jj_consume_token(WHILE);
			jj_consume_token(46);
			cond = expr();
			jj_consume_token(51);
			jj_consume_token(48);
			{
				if ("" != null) return new DoWhileNode(location(t), body, cond);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("dowhile_stmt");
		}
	}

	final public ForNode for_stmt() throws ParseException {
		trace_call("for_stmt");
		try {
			Token t;
			ExpressionNode init = null, cond = null, incr = null;
			StatementNode body;
			t = jj_consume_token(FOR);
			jj_consume_token(46);
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case SIZEOF:
				case IDENTIFIER:
				case INTEGER:
				case CHARACTER:
				case STRING:
				case 46:
				case 57:
				case 80:
				case 83:
				case 84:
				case 87:
				case 88:
				case 89:
				case 90: {
					init = expr();
					break;
				}
				default:
					jj_la1[19] = jj_gen;
					;
			}
			jj_consume_token(48);
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case SIZEOF:
				case IDENTIFIER:
				case INTEGER:
				case CHARACTER:
				case STRING:
				case 46:
				case 57:
				case 80:
				case 83:
				case 84:
				case 87:
				case 88:
				case 89:
				case 90: {
					cond = expr();
					break;
				}
				default:
					jj_la1[20] = jj_gen;
					;
			}
			jj_consume_token(48);
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case SIZEOF:
				case IDENTIFIER:
				case INTEGER:
				case CHARACTER:
				case STRING:
				case 46:
				case 57:
				case 80:
				case 83:
				case 84:
				case 87:
				case 88:
				case 89:
				case 90: {
					incr = expr();
					break;
				}
				default:
					jj_la1[21] = jj_gen;
					;
			}
			jj_consume_token(51);
			body = stmt();
			{
				if ("" != null) return new ForNode(location(t), init, cond, incr, body);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("for_stmt");
		}
	}

	final public SwitchNode switch_stmt() throws ParseException {
		trace_call("switch_stmt");
		try {
			Token t;
			ExpressionNode cond;
			List<CaseNode> bodies;
			t = jj_consume_token(SWITCH);
			jj_consume_token(46);
			cond = expr();
			jj_consume_token(51);
			jj_consume_token(53);
			bodies = case_clauses();
			jj_consume_token(54);
			{
				if ("" != null) return new SwitchNode(location(t), cond, bodies);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("switch_stmt");
		}
	}

	final public List<CaseNode> case_clauses() throws ParseException {
		trace_call("case_clauses");
		try {
			List<CaseNode> clauses = new ArrayList<CaseNode>();
			CaseNode n;
			label_12:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case CASE: {
						;
						break;
					}
					default:
						jj_la1[22] = jj_gen;
						break label_12;
				}
				n = case_clause();
				clauses.add(n);
			}
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case DEFAULT_: {
					n = default_clause();
					clauses.add(n);
					break;
				}
				default:
					jj_la1[23] = jj_gen;
					;
			}
			{
				if ("" != null) return clauses;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("case_clauses");
		}
	}

	final public CaseNode case_clause() throws ParseException {
		trace_call("case_clause");
		try {
			List<ExpressionNode> values;
			BlockNode body;
			values = cases();
			body = case_body();
			{
				if ("" != null) return new CaseNode(body.location(), values, body);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("case_clause");
		}
	}

	final public List<ExpressionNode> cases() throws ParseException {
		trace_call("cases");
		try {
			List<ExpressionNode> values = new ArrayList<ExpressionNode>();
			ExpressionNode n;
			label_13:
			while (true) {
				jj_consume_token(CASE);
				n = primary();
				jj_consume_token(58);
				values.add(n);
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case CASE: {
						;
						break;
					}
					default:
						jj_la1[24] = jj_gen;
						break label_13;
				}
			}
			{
				if ("" != null) return values;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("cases");
		}
	}

	final public CaseNode default_clause() throws ParseException {
		trace_call("default_clause");
		try {
			BlockNode body;
			jj_consume_token(DEFAULT_);
			jj_consume_token(58);
			body = case_body();
			{
				if ("" != null) return new CaseNode(body.location(), new ArrayList<ExpressionNode>(), body);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("default_clause");
		}
	}

	final public BlockNode case_body() throws ParseException {
		trace_call("case_body");
		try {
			LinkedList<StatementNode> stmts = new LinkedList<StatementNode>();
			StatementNode s;
			label_14:
			while (true) {
				s = stmt();
				if (s != null) stmts.add(s);
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case IF:
					case SWITCH:
					case WHILE:
					case DO:
					case FOR:
					case RETURN:
					case BREAK:
					case CONTINUE:
					case GOTO:
					case SIZEOF:
					case IDENTIFIER:
					case INTEGER:
					case CHARACTER:
					case STRING:
					case 46:
					case 48:
					case 53:
					case 57:
					case 80:
					case 83:
					case 84:
					case 87:
					case 88:
					case 89:
					case 90: {
						;
						break;
					}
					default:
						jj_la1[25] = jj_gen;
						break label_14;
				}
			}
// last stmt of case clause must be break stmt.
			if (!(stmts.getLast() instanceof BreakNode)) {
				{
					if (true) throw new ParseException(
							"missing break statement at the last of case clause");
				}
			}
			{
				if ("" != null) return new BlockNode(stmts.get(0).location(),
						new ArrayList<DefinedVariable>(),
						stmts);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("case_body");
		}
	}

	final public GotoNode goto_stmt() throws ParseException {
		trace_call("goto_stmt");
		try {
			Token t, name;
			t = jj_consume_token(GOTO);
			name = jj_consume_token(IDENTIFIER);
			jj_consume_token(48);
			{
				if ("" != null) return new GotoNode(location(t), name.image);
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("goto_stmt");
		}
	}

	// #@@range/break_stmt{
	final public BreakNode break_stmt() throws ParseException {
		trace_call("break_stmt");
		try {
			Token t;
			t = jj_consume_token(BREAK);
			jj_consume_token(48);
			{
				if ("" != null) return new BreakNode(location(t));
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("break_stmt");
		}
	}

	// #@@}
	final public ContinueNode continue_stmt() throws ParseException {
		trace_call("continue_stmt");
		try {
			Token t;
			t = jj_consume_token(CONTINUE);
			jj_consume_token(48);
			{
				if ("" != null) return new ContinueNode(location(t));
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("continue_stmt");
		}
	}

	final public ReturnNode return_stmt() throws ParseException {
		trace_call("return_stmt");
		try {
			Token t;
			ExpressionNode expr;
			if (jj_2_18(2)) {
				t = jj_consume_token(RETURN);
				jj_consume_token(48);
				{
					if ("" != null) return new ReturnNode(location(t), null);
				}
			} else {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case RETURN: {
						t = jj_consume_token(RETURN);
						expr = expr();
						jj_consume_token(48);
						{
							if ("" != null) return new ReturnNode(location(t), expr);
						}
						break;
					}
					default:
						jj_la1[26] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("return_stmt");
		}
	}

	// #@@range/expression{
	final public ExpressionNode expr() throws ParseException {
		trace_call("expression");
		try {
			ExpressionNode lhs, rhs, expr;
			String op;
			if (jj_2_19(2147483647)) {
				lhs = term();
				jj_consume_token(49);
				rhs = expr();
				{
					if ("" != null) return new AssignNode(lhs, rhs);
				}
			} else if (jj_2_20(2147483647)) {
				lhs = term();
				op = opassign_op();
				rhs = expr();
				{
					if ("" != null) return new OpAssignNode(lhs, op, rhs);
				}
			} else {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case SIZEOF:
					case IDENTIFIER:
					case INTEGER:
					case CHARACTER:
					case STRING:
					case 46:
					case 57:
					case 80:
					case 83:
					case 84:
					case 87:
					case 88:
					case 89:
					case 90: {
						expr = expr10();
						{
							if ("" != null) return expr;
						}
						break;
					}
					default:
						jj_la1[27] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expression");
		}
	}

// #@@}

	// #@@range/opassign_op{
	final public String opassign_op() throws ParseException {
		trace_call("opassign_op");
		try {
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case 59: {
					jj_consume_token(59);
					{
						if ("" != null) return "+";
					}
					break;
				}
				case 60: {
					jj_consume_token(60);
					{
						if ("" != null) return "-";
					}
					break;
				}
				case 61: {
					jj_consume_token(61);
					{
						if ("" != null) return "*";
					}
					break;
				}
				case 62: {
					jj_consume_token(62);
					{
						if ("" != null) return "/";
					}
					break;
				}
				case 63: {
					jj_consume_token(63);
					{
						if ("" != null) return "%";
					}
					break;
				}
				case 64: {
					jj_consume_token(64);
					{
						if ("" != null) return "&";
					}
					break;
				}
				case 65: {
					jj_consume_token(65);
					{
						if ("" != null) return "|";
					}
					break;
				}
				case 66: {
					jj_consume_token(66);
					{
						if ("" != null) return "^";
					}
					break;
				}
				case 67: {
					jj_consume_token(67);
					{
						if ("" != null) return "<<";
					}
					break;
				}
				case 68: {
					jj_consume_token(68);
					{
						if ("" != null) return ">>";
					}
					break;
				}
				default:
					jj_la1[28] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("opassign_op");
		}
	}

// #@@}

	// #@@range/expr10{
	final public ExpressionNode expr10() throws ParseException {
		trace_call("expr10");
		try {
			ExpressionNode c, t, e;
			c = expr9();
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case 69: {
					jj_consume_token(69);
					t = expr();
					jj_consume_token(58);
					e = expr10();
					{
						if ("" != null) return new CondExpressionNode(c, t, e);
					}
					break;
				}
				default:
					jj_la1[29] = jj_gen;
					;
			}
			{
				if ("" != null) return c;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr10");
		}
	}

// #@@}

	// #@@range/expr9{
	final public ExpressionNode expr9() throws ParseException {
		trace_call("expr9");
		try {
			ExpressionNode l, r;
			l = expr8();
			label_15:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 70: {
						;
						break;
					}
					default:
						jj_la1[30] = jj_gen;
						break label_15;
				}
				jj_consume_token(70);
				r = expr8();
				l = new LogicalOrNode(l, r);
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr9");
		}
	}

// #@@}

	// #@@range/expr8{
	final public ExpressionNode expr8() throws ParseException {
		trace_call("expr8");
		try {
			ExpressionNode l, r;
			l = expr7();
			label_16:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 71: {
						;
						break;
					}
					default:
						jj_la1[31] = jj_gen;
						break label_16;
				}
				jj_consume_token(71);
				r = expr7();
				l = new LogicalAndNode(l, r);
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr8");
		}
	}

// #@@}

	// #@@range/expr7{
	final public ExpressionNode expr7() throws ParseException {
		trace_call("expr7");
		try {
			ExpressionNode l, r;
			l = expr6();
			label_17:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77: {
						;
						break;
					}
					default:
						jj_la1[32] = jj_gen;
						break label_17;
				}
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 72: {
						jj_consume_token(72);
						r = expr6();
						l = new BinaryOpNode(l, ">", r);
						break;
					}
					case 73: {
						jj_consume_token(73);
						r = expr6();
						l = new BinaryOpNode(l, "<", r);
						break;
					}
					case 74: {
						jj_consume_token(74);
						r = expr6();
						l = new BinaryOpNode(l, ">=", r);
						break;
					}
					case 75: {
						jj_consume_token(75);
						r = expr6();
						l = new BinaryOpNode(l, "<=", r);
						break;
					}
					case 76: {
						jj_consume_token(76);
						r = expr6();
						l = new BinaryOpNode(l, "==", r);
						break;
					}
					case 77: {
						jj_consume_token(77);
						r = expr6();
						l = new BinaryOpNode(l, "!=", r);
						break;
					}
					default:
						jj_la1[33] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr7");
		}
	}

// #@@}

	// #@@range/expr6{
	final public ExpressionNode expr6() throws ParseException {
		trace_call("expr6");
		try {
			ExpressionNode l, r;
			l = expr5();
			label_18:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 78: {
						;
						break;
					}
					default:
						jj_la1[34] = jj_gen;
						break label_18;
				}
				jj_consume_token(78);
				r = expr5();
				l = new BinaryOpNode(l, "|", r);
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr6");
		}
	}

// #@@}

	// #@@range/expr5{
	final public ExpressionNode expr5() throws ParseException {
		trace_call("expr5");
		try {
			ExpressionNode l, r;
			l = expr4();
			label_19:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 79: {
						;
						break;
					}
					default:
						jj_la1[35] = jj_gen;
						break label_19;
				}
				jj_consume_token(79);
				r = expr4();
				l = new BinaryOpNode(l, "^", r);
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr5");
		}
	}

// #@@}

	// #@@range/expr4{
	final public ExpressionNode expr4() throws ParseException {
		trace_call("expr4");
		try {
			ExpressionNode l, r;
			l = expr3();
			label_20:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 80: {
						;
						break;
					}
					default:
						jj_la1[36] = jj_gen;
						break label_20;
				}
				jj_consume_token(80);
				r = expr3();
				l = new BinaryOpNode(l, "&", r);
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr4");
		}
	}

// #@@}

	// #@@range/expr3{
	final public ExpressionNode expr3() throws ParseException {
		trace_call("expr3");
		try {
			ExpressionNode l, r;
			l = expr2();
			label_21:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 81:
					case 82: {
						;
						break;
					}
					default:
						jj_la1[37] = jj_gen;
						break label_21;
				}
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 81: {
						jj_consume_token(81);
						r = expr2();
						l = new BinaryOpNode(l, ">>", r);
						break;
					}
					case 82: {
						jj_consume_token(82);
						r = expr2();
						l = new BinaryOpNode(l, "<<", r);
						break;
					}
					default:
						jj_la1[38] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr3");
		}
	}

// #@@}

	// #@@range/expr2{
	final public ExpressionNode expr2() throws ParseException {
		trace_call("expr2");
		try {
			ExpressionNode l, r;
			l = expr1();
			label_22:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 83:
					case 84: {
						;
						break;
					}
					default:
						jj_la1[39] = jj_gen;
						break label_22;
				}
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 83: {
						jj_consume_token(83);
						r = expr1();
						l = new BinaryOpNode(l, "+", r);
						break;
					}
					case 84: {
						jj_consume_token(84);
						r = expr1();
						l = new BinaryOpNode(l, "-", r);
						break;
					}
					default:
						jj_la1[40] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr2");
		}
	}

// #@@}

	// #@@range/expr1{
	final public ExpressionNode expr1() throws ParseException {
		trace_call("expr1");
		try {
			ExpressionNode l, r;
			l = term();
			label_23:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 57:
					case 85:
					case 86: {
						;
						break;
					}
					default:
						jj_la1[41] = jj_gen;
						break label_23;
				}
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 57: {
						jj_consume_token(57);
						r = term();
						l = new BinaryOpNode(l, "*", r);
						break;
					}
					case 85: {
						jj_consume_token(85);
						r = term();
						l = new BinaryOpNode(l, "/", r);
						break;
					}
					case 86: {
						jj_consume_token(86);
						r = term();
						l = new BinaryOpNode(l, "%", r);
						break;
					}
					default:
						jj_la1[42] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			{
				if ("" != null) return l;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("expr1");
		}
	}

// #@@}

	// #@@range/term{
	final public ExpressionNode term() throws ParseException {
		trace_call("term");
		try {
			TypeNode t;
			ExpressionNode n;
			if (jj_2_21(2147483647)) {
				jj_consume_token(46);
				t = type();
				jj_consume_token(51);
				n = term();
				{
					if ("" != null) return new CastNode(t, n);
				}
			} else {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case SIZEOF:
					case IDENTIFIER:
					case INTEGER:
					case CHARACTER:
					case STRING:
					case 46:
					case 57:
					case 80:
					case 83:
					case 84:
					case 87:
					case 88:
					case 89:
					case 90: {
						n = unary();
						{
							if ("" != null) return n;
						}
						break;
					}
					default:
						jj_la1[43] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("term");
		}
	}

// #@@}

	// #@@range/unary{
	final public ExpressionNode unary() throws ParseException {
		trace_call("unary");
		try {
			ExpressionNode n;
			TypeNode t;
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case 87: {
					jj_consume_token(87);
					n = unary();
					{
						if ("" != null) return new PrefixOpNode("++", n);
					}
					break;
				}
				case 88: {
					jj_consume_token(88);
					n = unary();
					{
						if ("" != null) return new PrefixOpNode("--", n);
					}
					break;
				}
				case 83: {
					jj_consume_token(83);
					n = term();
					{
						if ("" != null) return new UnaryOpNode("+", n);
					}
					break;
				}
				case 84: {
					jj_consume_token(84);
					n = term();
					{
						if ("" != null) return new UnaryOpNode("-", n);
					}
					break;
				}
				case 89: {
					jj_consume_token(89);
					n = term();
					{
						if ("" != null) return new UnaryOpNode("!", n);
					}
					break;
				}
				case 90: {
					jj_consume_token(90);
					n = term();
					{
						if ("" != null) return new UnaryOpNode("~", n);
					}
					break;
				}
				case 57: {
					jj_consume_token(57);
					n = term();
					{
						if ("" != null) return new DereferenceNode(n);
					}
					break;
				}
				case 80: {
					jj_consume_token(80);
					n = term();
					{
						if ("" != null) return new AddressNode(n);
					}
					break;
				}
				default:
					jj_la1[44] = jj_gen;
					if (jj_2_22(3)) {
						jj_consume_token(SIZEOF);
						jj_consume_token(46);
						t = type();
						jj_consume_token(51);
						{
							if ("" != null) return new SizeofTypeNode(t, size_t());
						}
					} else {
						switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
							case SIZEOF: {
								jj_consume_token(SIZEOF);
								n = unary();
								{
									if ("" != null) return new SizeofExpressionNode(n, size_t());
								}
								break;
							}
							case IDENTIFIER:
							case INTEGER:
							case CHARACTER:
							case STRING:
							case 46: {
								n = postfix();
								{
									if ("" != null) return n;
								}
								break;
							}
							default:
								jj_la1[45] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("unary");
		}
	}

// #@@}

	// #@@range/postfix{
	final public ExpressionNode postfix() throws ParseException {
		trace_call("postfix");
		try {
			ExpressionNode expr, idx;
			String memb;
			List<ExpressionNode> args;
			expr = primary();
			label_24:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 46:
					case 47:
					case 55:
					case 87:
					case 88:
					case 91: {
						;
						break;
					}
					default:
						jj_la1[46] = jj_gen;
						break label_24;
				}
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case 87: {
						jj_consume_token(87);
						expr = new SuffixOpNode("++", expr);
						break;
					}
					case 88: {
						jj_consume_token(88);
						expr = new SuffixOpNode("--", expr);
						break;
					}
					case 55: {
						jj_consume_token(55);
						idx = expr();
						jj_consume_token(56);
						expr = new ArefNode(expr, idx);
						break;
					}
					case 47: {
						jj_consume_token(47);
						memb = name();
						expr = new MemberNode(expr, memb);
						break;
					}
					case 91: {
						jj_consume_token(91);
						memb = name();
						expr = new PtrMemberNode(expr, memb);
						break;
					}
					case 46: {
						jj_consume_token(46);
						args = args();
						jj_consume_token(51);
						expr = new FuncallNode(expr, args);
						break;
					}
					default:
						jj_la1[47] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			{
				if ("" != null) return expr;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("postfix");
		}
	}

// #@@}

	// #@@range/name{
	final public String name() throws ParseException {
		trace_call("name");
		try {
			Token t;
			t = jj_consume_token(IDENTIFIER);
			{
				if ("" != null) return t.image;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("name");
		}
	}

// #@@}

	// #@@range/args{
	final public List<ExpressionNode> args() throws ParseException {
		trace_call("args");
		try {
			List<ExpressionNode> args = new ArrayList<ExpressionNode>();
			ExpressionNode arg;
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case SIZEOF:
				case IDENTIFIER:
				case INTEGER:
				case CHARACTER:
				case STRING:
				case 46:
				case 57:
				case 80:
				case 83:
				case 84:
				case 87:
				case 88:
				case 89:
				case 90: {
					arg = expr();
					args.add(arg);
					label_25:
					while (true) {
						switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
							case 50: {
								;
								break;
							}
							default:
								jj_la1[48] = jj_gen;
								break label_25;
						}
						jj_consume_token(50);
						arg = expr();
						args.add(arg);
					}
					break;
				}
				default:
					jj_la1[49] = jj_gen;
					;
			}
			{
				if ("" != null) return args;
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("args");
		}
	}

// #@@}

	// #@@range/primary{
	final public ExpressionNode primary() throws ParseException {
		trace_call("primary");
		try {
			Token t;
			ExpressionNode n;
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case INTEGER: {
					t = jj_consume_token(INTEGER);
					{
						if ("" != null) return integerNode(location(t), t.image);
					}
					break;
				}
				case CHARACTER: {
					t = jj_consume_token(CHARACTER);
					{
						if ("" != null) return new IntegerLiteralNode(location(t),
								IntegerTypeRef.charRef(),
								characterCode(t.image));
					}
					break;
				}
				case STRING: {
					t = jj_consume_token(STRING);
					{
						if ("" != null) return new StringLiteralNode(location(t),
								new PointerTypeRef(IntegerTypeRef.charRef()),
								stringValue(t.image));
					}
					break;
				}
				case IDENTIFIER: {
					t = jj_consume_token(IDENTIFIER);
					{
						if ("" != null) return new VariableNode(location(t), t.image);
					}
					break;
				}
				case 46: {
					jj_consume_token(46);
					n = expr();
					jj_consume_token(51);
					{
						if ("" != null) return n;
					}
					break;
				}
				default:
					jj_la1[50] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("primary");
		}
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(16, xla);
		}
	}

	private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_18();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(17, xla);
		}
	}

	private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_19();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(18, xla);
		}
	}

	private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_20();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(19, xla);
		}
	}

	private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_21();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(20, xla);
		}
	}

	private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_22();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(21, xla);
		}
	}

	private boolean jj_3R_127() {
		if (jj_scan_token(77)) return true;
		if (jj_3R_118()) return true;
		return false;
	}

	private boolean jj_3R_126() {
		if (jj_scan_token(76)) return true;
		if (jj_3R_118()) return true;
		return false;
	}

	private boolean jj_3R_118() {
		if (jj_3R_120()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_121()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_5() {
		if (jj_scan_token(VOID)) return true;
		if (jj_scan_token(51)) return true;
		return false;
	}

	private boolean jj_3R_125() {
		if (jj_scan_token(75)) return true;
		if (jj_3R_118()) return true;
		return false;
	}

	private boolean jj_3_12() {
		if (jj_3R_37()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_90()) jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_124() {
		if (jj_scan_token(74)) return true;
		if (jj_3R_118()) return true;
		return false;
	}

	private boolean jj_3R_123() {
		if (jj_scan_token(73)) return true;
		if (jj_3R_118()) return true;
		return false;
	}

	private boolean jj_3R_122() {
		if (jj_scan_token(72)) return true;
		if (jj_3R_118()) return true;
		return false;
	}

	private boolean jj_3R_119() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_122()) {
			jj_scanpos = xsp;
			if (jj_3R_123()) {
				jj_scanpos = xsp;
				if (jj_3R_124()) {
					jj_scanpos = xsp;
					if (jj_3R_125()) {
						jj_scanpos = xsp;
						if (jj_3R_126()) {
							jj_scanpos = xsp;
							if (jj_3R_127()) return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_6() {
		if (jj_3R_34()) return true;
		return false;
	}

	private boolean jj_3R_88() {
		if (jj_scan_token(VOID)) return true;
		return false;
	}

	private boolean jj_3R_77() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_88()) {
			jj_scanpos = xsp;
			if (jj_3_12()) return true;
		}
		return false;
	}

	private boolean jj_3R_97() {
		if (jj_scan_token(46)) return true;
		if (jj_3R_104()) return true;
		if (jj_scan_token(51)) return true;
		return false;
	}

	private boolean jj_3R_96() {
		if (jj_scan_token(IDENTIFIER)) return true;
		return false;
	}

	private boolean jj_3R_117() {
		if (jj_scan_token(71)) return true;
		if (jj_3R_116()) return true;
		return false;
	}

	private boolean jj_3R_116() {
		if (jj_3R_118()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_119()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_95() {
		if (jj_scan_token(STRING)) return true;
		return false;
	}

	private boolean jj_3R_75() {
		if (jj_scan_token(46)) return true;
		if (jj_3R_77()) return true;
		if (jj_scan_token(51)) return true;
		return false;
	}

	private boolean jj_3R_32() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(14)) jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_94() {
		if (jj_scan_token(CHARACTER)) return true;
		return false;
	}

	private boolean jj_3R_74() {
		if (jj_scan_token(57)) return true;
		return false;
	}

	private boolean jj_3R_115() {
		if (jj_scan_token(70)) return true;
		if (jj_3R_114()) return true;
		return false;
	}

	private boolean jj_3R_114() {
		if (jj_3R_116()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_117()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_93() {
		if (jj_scan_token(INTEGER)) return true;
		return false;
	}

	private boolean jj_3R_91() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_93()) {
			jj_scanpos = xsp;
			if (jj_3R_94()) {
				jj_scanpos = xsp;
				if (jj_3R_95()) {
					jj_scanpos = xsp;
					if (jj_3R_96()) {
						jj_scanpos = xsp;
						if (jj_3R_97()) return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_73() {
		if (jj_scan_token(55)) return true;
		if (jj_scan_token(INTEGER)) return true;
		if (jj_scan_token(56)) return true;
		return false;
	}

	private boolean jj_3_10() {
		if (jj_scan_token(55)) return true;
		if (jj_scan_token(56)) return true;
		return false;
	}

	private boolean jj_3R_43() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_10()) {
			jj_scanpos = xsp;
			if (jj_3R_73()) {
				jj_scanpos = xsp;
				if (jj_3R_74()) {
					jj_scanpos = xsp;
					if (jj_3R_75()) return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3R_44() {
		if (jj_3R_32()) return true;
		if (jj_3R_26()) return true;
		return false;
	}

	private boolean jj_3R_50() {
		if (jj_scan_token(49)) return true;
		return false;
	}

	private boolean jj_3R_26() {
		if (jj_3R_42()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_43()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_112() {
		if (jj_3R_114()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_115()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_113() {
		if (jj_scan_token(69)) return true;
		if (jj_3R_104()) return true;
		if (jj_scan_token(58)) return true;
		if (jj_3R_110()) return true;
		return false;
	}

	private boolean jj_3R_111() {
		if (jj_scan_token(50)) return true;
		if (jj_3R_104()) return true;
		return false;
	}

	private boolean jj_3R_109() {
		if (jj_3R_104()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_111()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_105() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_109()) jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_41() {
		if (jj_3R_26()) return true;
		return false;
	}

	private boolean jj_3R_110() {
		if (jj_3R_112()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_113()) jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_45() {
		if (jj_scan_token(CONST)) return true;
		return false;
	}

	private boolean jj_3R_49() {
		if (jj_scan_token(IDENTIFIER)) return true;
		return false;
	}

	private boolean jj_3R_63() {
		if (jj_scan_token(68)) return true;
		return false;
	}

	private boolean jj_3R_62() {
		if (jj_scan_token(67)) return true;
		return false;
	}

	private boolean jj_3R_61() {
		if (jj_scan_token(66)) return true;
		return false;
	}

	private boolean jj_3R_60() {
		if (jj_scan_token(65)) return true;
		return false;
	}

	private boolean jj_3R_59() {
		if (jj_scan_token(64)) return true;
		return false;
	}

	private boolean jj_3R_58() {
		if (jj_scan_token(63)) return true;
		return false;
	}

	private boolean jj_3R_57() {
		if (jj_scan_token(62)) return true;
		return false;
	}

	private boolean jj_3R_56() {
		if (jj_scan_token(61)) return true;
		return false;
	}

	private boolean jj_3R_55() {
		if (jj_scan_token(60)) return true;
		return false;
	}

	private boolean jj_3R_103() {
		if (jj_scan_token(46)) return true;
		if (jj_3R_105()) return true;
		if (jj_scan_token(51)) return true;
		return false;
	}

	private boolean jj_3R_54() {
		if (jj_scan_token(59)) return true;
		return false;
	}

	private boolean jj_3R_102() {
		if (jj_scan_token(91)) return true;
		if (jj_3R_49()) return true;
		return false;
	}

	private boolean jj_3R_101() {
		if (jj_scan_token(47)) return true;
		if (jj_3R_49()) return true;
		return false;
	}

	private boolean jj_3R_40() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_54()) {
			jj_scanpos = xsp;
			if (jj_3R_55()) {
				jj_scanpos = xsp;
				if (jj_3R_56()) {
					jj_scanpos = xsp;
					if (jj_3R_57()) {
						jj_scanpos = xsp;
						if (jj_3R_58()) {
							jj_scanpos = xsp;
							if (jj_3R_59()) {
								jj_scanpos = xsp;
								if (jj_3R_60()) {
									jj_scanpos = xsp;
									if (jj_3R_61()) {
										jj_scanpos = xsp;
										if (jj_3R_62()) {
											jj_scanpos = xsp;
											if (jj_3R_63()) return true;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_100() {
		if (jj_scan_token(55)) return true;
		if (jj_3R_104()) return true;
		if (jj_scan_token(56)) return true;
		return false;
	}

	private boolean jj_3R_99() {
		if (jj_scan_token(88)) return true;
		return false;
	}

	private boolean jj_3R_51() {
		if (jj_scan_token(50)) return true;
		return false;
	}

	private boolean jj_3R_98() {
		if (jj_scan_token(87)) return true;
		return false;
	}

	private boolean jj_3R_92() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_98()) {
			jj_scanpos = xsp;
			if (jj_3R_99()) {
				jj_scanpos = xsp;
				if (jj_3R_100()) {
					jj_scanpos = xsp;
					if (jj_3R_101()) {
						jj_scanpos = xsp;
						if (jj_3R_102()) {
							jj_scanpos = xsp;
							if (jj_3R_103()) return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_20() {
		if (jj_3R_39()) return true;
		if (jj_3R_40()) return true;
		return false;
	}

	private boolean jj_3R_89() {
		if (jj_3R_91()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_92()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_108() {
		if (jj_3R_110()) return true;
		return false;
	}

	private boolean jj_3_19() {
		if (jj_3R_39()) return true;
		if (jj_scan_token(49)) return true;
		return false;
	}

	private boolean jj_3R_33() {
		if (jj_3R_32()) return true;
		if (jj_3R_41()) return true;
		if (jj_3R_49()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_50()) jj_scanpos = xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_51()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(48)) return true;
		return false;
	}

	private boolean jj_3R_38() {
		if (jj_scan_token(IDENTIFIER)) return true;
		if (jj_scan_token(58)) return true;
		return false;
	}

	private boolean jj_3R_107() {
		if (jj_3R_39()) return true;
		if (jj_3R_40()) return true;
		if (jj_3R_104()) return true;
		return false;
	}

	private boolean jj_3R_87() {
		if (jj_3R_89()) return true;
		return false;
	}

	private boolean jj_3R_36() {
		if (jj_3R_41()) return true;
		return false;
	}

	private boolean jj_3R_106() {
		if (jj_3R_39()) return true;
		if (jj_scan_token(49)) return true;
		if (jj_3R_104()) return true;
		return false;
	}

	private boolean jj_3R_104() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_106()) {
			jj_scanpos = xsp;
			if (jj_3R_107()) {
				jj_scanpos = xsp;
				if (jj_3R_108()) return true;
			}
		}
		return false;
	}

	private boolean jj_3R_86() {
		if (jj_scan_token(SIZEOF)) return true;
		if (jj_3R_76()) return true;
		return false;
	}

	private boolean jj_3_3() {
		if (jj_3R_32()) return true;
		if (jj_3R_26()) return true;
		if (jj_scan_token(IDENTIFIER)) return true;
		if (jj_scan_token(46)) return true;
		return false;
	}

	private boolean jj_3_22() {
		if (jj_scan_token(SIZEOF)) return true;
		if (jj_scan_token(46)) return true;
		if (jj_3R_41()) return true;
		if (jj_scan_token(51)) return true;
		return false;
	}

	private boolean jj_3R_85() {
		if (jj_scan_token(80)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_31() {
		if (jj_3R_48()) return true;
		return false;
	}

	private boolean jj_3R_84() {
		if (jj_scan_token(57)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_30() {
		if (jj_3R_47()) return true;
		return false;
	}

	private boolean jj_3_9() {
		if (jj_3R_36()) return true;
		return false;
	}

	private boolean jj_3R_83() {
		if (jj_scan_token(90)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_29() {
		if (jj_3R_46()) return true;
		return false;
	}

	private boolean jj_3R_82() {
		if (jj_scan_token(89)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_28() {
		if (jj_3R_45()) return true;
		return false;
	}

	private boolean jj_3R_81() {
		if (jj_scan_token(84)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3_18() {
		if (jj_scan_token(RETURN)) return true;
		if (jj_scan_token(48)) return true;
		return false;
	}

	private boolean jj_3R_80() {
		if (jj_scan_token(83)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_33()) return true;
		return false;
	}

	private boolean jj_3R_79() {
		if (jj_scan_token(88)) return true;
		if (jj_3R_76()) return true;
		return false;
	}

	private boolean jj_3R_78() {
		if (jj_scan_token(87)) return true;
		if (jj_3R_76()) return true;
		return false;
	}

	private boolean jj_3R_76() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_78()) {
			jj_scanpos = xsp;
			if (jj_3R_79()) {
				jj_scanpos = xsp;
				if (jj_3R_80()) {
					jj_scanpos = xsp;
					if (jj_3R_81()) {
						jj_scanpos = xsp;
						if (jj_3R_82()) {
							jj_scanpos = xsp;
							if (jj_3R_83()) {
								jj_scanpos = xsp;
								if (jj_3R_84()) {
									jj_scanpos = xsp;
									if (jj_3R_85()) {
										jj_scanpos = xsp;
										if (jj_3_22()) {
											jj_scanpos = xsp;
											if (jj_3R_86()) {
												jj_scanpos = xsp;
												if (jj_3R_87()) return true;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_27() {
		if (jj_3R_44()) return true;
		return false;
	}

	private boolean jj_3_2() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_27()) {
			jj_scanpos = xsp;
			if (jj_3_4()) {
				jj_scanpos = xsp;
				if (jj_3R_28()) {
					jj_scanpos = xsp;
					if (jj_3R_29()) {
						jj_scanpos = xsp;
						if (jj_3R_30()) {
							jj_scanpos = xsp;
							if (jj_3R_31()) return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_17() {
		if (jj_3R_38()) return true;
		return false;
	}

	private boolean jj_3_21() {
		if (jj_scan_token(46)) return true;
		if (jj_3R_41()) return true;
		return false;
	}

	private boolean jj_3R_53() {
		if (jj_3R_76()) return true;
		return false;
	}

	private boolean jj_3R_47() {
		if (jj_scan_token(UNION)) return true;
		return false;
	}

	private boolean jj_3R_39() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_52()) {
			jj_scanpos = xsp;
			if (jj_3R_53()) return true;
		}
		return false;
	}

	private boolean jj_3R_52() {
		if (jj_scan_token(46)) return true;
		if (jj_3R_41()) return true;
		if (jj_scan_token(51)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_143() {
		if (jj_scan_token(86)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_142() {
		if (jj_scan_token(85)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_141() {
		if (jj_scan_token(57)) return true;
		if (jj_3R_39()) return true;
		return false;
	}

	private boolean jj_3R_138() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_141()) {
			jj_scanpos = xsp;
			if (jj_3R_142()) {
				jj_scanpos = xsp;
				if (jj_3R_143()) return true;
			}
		}
		return false;
	}

	private boolean jj_3R_46() {
		if (jj_scan_token(STRUCT)) return true;
		return false;
	}

	private boolean jj_3R_140() {
		if (jj_scan_token(84)) return true;
		if (jj_3R_134()) return true;
		return false;
	}

	private boolean jj_3R_134() {
		if (jj_3R_39()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_138()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_139() {
		if (jj_scan_token(83)) return true;
		if (jj_3R_134()) return true;
		return false;
	}

	private boolean jj_3R_135() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_139()) {
			jj_scanpos = xsp;
			if (jj_3R_140()) return true;
		}
		return false;
	}

	private boolean jj_3R_48() {
		if (jj_scan_token(TYPEDEF)) return true;
		return false;
	}

	private boolean jj_3_8() {
		if (jj_3R_33()) return true;
		return false;
	}

	private boolean jj_3R_137() {
		if (jj_scan_token(82)) return true;
		if (jj_3R_132()) return true;
		return false;
	}

	private boolean jj_3R_132() {
		if (jj_3R_134()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_135()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_136() {
		if (jj_scan_token(81)) return true;
		if (jj_3R_132()) return true;
		return false;
	}

	private boolean jj_3R_133() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_136()) {
			jj_scanpos = xsp;
			if (jj_3R_137()) return true;
		}
		return false;
	}

	private boolean jj_3R_72() {
		if (jj_scan_token(IDENTIFIER)) return true;
		return false;
	}

	private boolean jj_3R_71() {
		if (jj_scan_token(UNION)) return true;
		if (jj_scan_token(IDENTIFIER)) return true;
		return false;
	}

	private boolean jj_3R_70() {
		if (jj_scan_token(STRUCT)) return true;
		if (jj_scan_token(IDENTIFIER)) return true;
		return false;
	}

	private boolean jj_3R_69() {
		if (jj_scan_token(UNSIGNED)) return true;
		if (jj_scan_token(LONG)) return true;
		return false;
	}

	private boolean jj_3_16() {
		if (jj_scan_token(UNSIGNED)) return true;
		if (jj_scan_token(INT)) return true;
		return false;
	}

	private boolean jj_3_15() {
		if (jj_scan_token(UNSIGNED)) return true;
		if (jj_scan_token(SHORT)) return true;
		return false;
	}

	private boolean jj_3R_131() {
		if (jj_scan_token(80)) return true;
		if (jj_3R_130()) return true;
		return false;
	}

	private boolean jj_3R_130() {
		if (jj_3R_132()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_133()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_14() {
		if (jj_scan_token(UNSIGNED)) return true;
		if (jj_scan_token(CHAR)) return true;
		return false;
	}

	private boolean jj_3R_68() {
		if (jj_scan_token(LONG)) return true;
		return false;
	}

	private boolean jj_3_1() {
		if (jj_scan_token(EXTERN)) return true;
		if (jj_3R_26()) return true;
		if (jj_scan_token(IDENTIFIER)) return true;
		if (jj_scan_token(46)) return true;
		return false;
	}

	private boolean jj_3R_67() {
		if (jj_scan_token(INT)) return true;
		return false;
	}

	private boolean jj_3R_66() {
		if (jj_scan_token(SHORT)) return true;
		return false;
	}

	private boolean jj_3R_65() {
		if (jj_scan_token(CHAR)) return true;
		return false;
	}

	private boolean jj_3R_42() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_64()) {
			jj_scanpos = xsp;
			if (jj_3R_65()) {
				jj_scanpos = xsp;
				if (jj_3R_66()) {
					jj_scanpos = xsp;
					if (jj_3R_67()) {
						jj_scanpos = xsp;
						if (jj_3R_68()) {
							jj_scanpos = xsp;
							if (jj_3_14()) {
								jj_scanpos = xsp;
								if (jj_3_15()) {
									jj_scanpos = xsp;
									if (jj_3_16()) {
										jj_scanpos = xsp;
										if (jj_3R_69()) {
											jj_scanpos = xsp;
											if (jj_3R_70()) {
												jj_scanpos = xsp;
												if (jj_3R_71()) {
													jj_scanpos = xsp;
													jj_lookingAhead = true;
													jj_semLA = isType(getToken(1).image);
													jj_lookingAhead = false;
													if (!jj_semLA || jj_3R_72()) return true;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_64() {
		if (jj_scan_token(VOID)) return true;
		return false;
	}

	private boolean jj_3R_35() {
		if (jj_3R_41()) return true;
		return false;
	}

	private boolean jj_3R_129() {
		if (jj_scan_token(79)) return true;
		if (jj_3R_128()) return true;
		return false;
	}

	private boolean jj_3R_128() {
		if (jj_3R_130()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_131()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_13() {
		if (jj_scan_token(50)) return true;
		if (jj_3R_26()) return true;
		return false;
	}

	private boolean jj_3R_37() {
		if (jj_3R_26()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_13()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_121() {
		if (jj_scan_token(78)) return true;
		if (jj_3R_120()) return true;
		return false;
	}

	private boolean jj_3R_120() {
		if (jj_3R_128()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_129()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_7() {
		if (jj_scan_token(50)) return true;
		if (jj_3R_35()) return true;
		return false;
	}

	private boolean jj_3R_34() {
		if (jj_3R_35()) return true;
		return false;
	}

	private boolean jj_3R_90() {
		if (jj_scan_token(50)) return true;
		if (jj_scan_token(52)) return true;
		return false;
	}

	private boolean jj_3_11() {
		if (jj_scan_token(VOID)) return true;
		if (jj_scan_token(51)) return true;
		return false;
	}

	/**
	 * Generated Token Manager.
	 */
	public ParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/**
	 * Current token.
	 */
	public Token token;
	/**
	 * Next token.
	 */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	/**
	 * Whether we are looking ahead.
	 */
	private boolean jj_lookingAhead = false;
	private boolean jj_semLA;
	private int jj_gen;
	final private int[] jj_la1 = new int[51];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;

	static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[]{0x80019800, 0x80019800, 0x0, 0x0, 0x80011800, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x7c0, 0x41800, 0x7f280000, 0x0, 0x7f280000, 0x100000, 0x0, 0x0, 0x0, 0x400000, 0x800000, 0x400000, 0x7f280000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[]{0x0, 0x0, 0x1, 0x8000, 0x0, 0x20000, 0x40000, 0x20000, 0x0, 0x40000, 0x2804000, 0x2804000, 0x40000, 0x0, 0x0, 0x221610e, 0x10000, 0x220610e, 0x0, 0x200610e, 0x200610e, 0x200610e, 0x0, 0x0, 0x0, 0x221610e, 0x0, 0x200610e, 0xf8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x2000000, 0x200610e, 0x2000000, 0x610e, 0x80c000, 0x80c000, 0x40000, 0x200610e, 0x610c,};
	}

	private static void jj_la1_init_2() {
		jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7990000, 0x0, 0x7990000, 0x0, 0x7990000, 0x7990000, 0x7990000, 0x0, 0x0, 0x0, 0x7990000, 0x0, 0x7990000, 0x1f, 0x20, 0x40, 0x80, 0x3f00, 0x3f00, 0x4000, 0x8000, 0x10000, 0x60000, 0x60000, 0x180000, 0x180000, 0x600000, 0x600000, 0x7990000, 0x7990000, 0x0, 0x9800000, 0x9800000, 0x0, 0x7990000, 0x0,};
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[22];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/**
	 * Constructor with InputStream.
	 */
	public Parser(java.io.InputStream stream) {
		this(stream, null);
	}

	/**
	 * Constructor with InputStream and supplied encoding
	 */
	public Parser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 51; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Reinitialise.
	 */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/**
	 * Reinitialise.
	 */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 51; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Constructor.
	 */
	public Parser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 51; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Reinitialise.
	 */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 51; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Constructor with generated Token Manager.
	 */
	public Parser(ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 51; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Reinitialise.
	 */
	public void ReInit(ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 51; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) token = token.next;
		else token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) c.first = null;
						c = c.next;
					}
				}
			}
			trace_token(token, "");
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	@SuppressWarnings("serial")
	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null) jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind) return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
		return false;
	}


	/**
	 * Get the next Token.
	 */
	final public Token getNextToken() {
		if (token.next != null) token = token.next;
		else token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		trace_token(token, " (in getNextToken)");
		return token;
	}

	/**
	 * Get the specific Token.
	 */
	final public Token getToken(int index) {
		Token t = jj_lookingAhead ? jj_scanpos : token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) t = t.next;
			else t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk_f() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop:
			for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/**
	 * Generate ParseException.
	 */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[92];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 51; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 92; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	private int trace_indent = 0;
	private boolean trace_enabled = true;

	/**
	 * Enable tracing.
	 */
	final public void enable_tracing() {
		trace_enabled = true;
	}

	/**
	 * Disable tracing.
	 */
	final public void disable_tracing() {
		trace_enabled = false;
	}

	private void trace_call(String s) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.println("Call:   " + s);
		}
		trace_indent = trace_indent + 2;
	}

	private void trace_return(String s) {
		trace_indent = trace_indent - 2;
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.println("Return: " + s);
		}
	}

	private void trace_token(Token t, String where) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.print("Consumed token: <" + tokenImage[t.kind]);
			if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
				System.out.print(": \"" + t.image + "\"");
			}
			System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
		}
	}

	private void trace_scan(Token t1, int t2) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.print("Visited token: <" + tokenImage[t1.kind]);
			if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
				System.out.print(": \"" + t1.image + "\"");
			}
			System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
		}
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 22; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
							case 0:
								jj_3_1();
								break;
							case 1:
								jj_3_2();
								break;
							case 2:
								jj_3_3();
								break;
							case 3:
								jj_3_4();
								break;
							case 4:
								jj_3_5();
								break;
							case 5:
								jj_3_6();
								break;
							case 6:
								jj_3_7();
								break;
							case 7:
								jj_3_8();
								break;
							case 8:
								jj_3_9();
								break;
							case 9:
								jj_3_10();
								break;
							case 10:
								jj_3_11();
								break;
							case 11:
								jj_3_12();
								break;
							case 12:
								jj_3_13();
								break;
							case 13:
								jj_3_14();
								break;
							case 14:
								jj_3_15();
								break;
							case 15:
								jj_3_16();
								break;
							case 16:
								jj_3_17();
								break;
							case 17:
								jj_3_18();
								break;
							case 18:
								jj_3_19();
								break;
							case 19:
								jj_3_20();
								break;
							case 20:
								jj_3_21();
								break;
							case 21:
								jj_3_22();
								break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

	// #@@}
}
